# -*- coding: utf-8 -*-
"""day3 - preprocessing

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1medksE0u768YX_SJy5zqSJ_djOnleJL4

#preprocessing is a process of preparing the raw data and making it suitable fro a machine learning model it s th 1st and crucial step while creating a machine learning model

#-----------------------------------------------------------------------------------
#1.getting the dataset
#2.importing librarie
#3.importing dataset
#4.finding missing data
#finding missing data (ways to handle missing data)

###by deleting the paticular row and
###by calculating mean
#5 enconding the categorial data
#6 feature scaling
#7 splitting dataset into training and test set

#-------------------------------------------------------------------------------------------
#column transformer
###syntax: ('name',tranformer,column_indices_or_names).
###name: identifier string for the transformer( any unique name).
###trnformer: any scikit-learn tranforemer(eg., standardScalar(),OneHotEncoder()).
#fill missing value
### data['columnname']=data['columnname'].fillna(value)
"""

import pandas as pd
df=pd.read_csv("/content/people_data.csv")
print(df)

from sklearn.preprocessing import LabelEncoder
data=["Red","Green","Blue","Green","Naggy","cricket"]
le=LabelEncoder()
encoded=le.fit_transform(data)
print(encoded)

from sklearn.preprocessing import LabelEncoder
data=pd.DataFrame({"Color":["Red","Green","Blue","Green","Biscuit_color","White"]})
encoded=pd.get_dummies(data,columns=["Color"])
print(encoded)

from sklearn.preprocessing import MinMaxScaler
data=[[30],[60],[90]]
scalar = MinMaxScaler()
scaled=scalar.fit_transform(data)
print(scaled)

from sklearn.preprocessing import StandardScaler
data=[[30],[60],[90]]
scalar=StandardScaler()
scaled=scalar.fit_transform(data)
print(scaled)

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
data = pd.read_csv("/content/people_data.csv")
print("shape",data.shape)
print("1st 5rows",data.head())
#using dropna
data=data.dropna()
print(data)
column_mean=np.mean(data["Age"])
print("column",column_mean)
plt.figure(figsize=(8,5))
plt.hist(data["Age"],bins=10,edgecolor="black")
plt.xlabel("value")
plt.ylabel("Frequency")
plt.title("distribution of the column")
plt.grid()
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
data = pd.read_csv("/content/people_data.csv")
print("shape",data.shape)
print("1st 5rows",data.head())
numeric_cols=["Age"]
#create transformer
transformer = ColumnTransformer([("impute_num",SimpleImputer(strategy="mean"),numeric_cols)],remainder="passthrough")
data[numeric_cols]=transformer.fit_transform(data[numeric_cols])
print("transformer",data)
#numpy
column_mean=np.mean(data["Age"])
print("column",column_mean)
plt.figure(figsize=(8,5))
plt.hist(data["Age"],bins=10,edgecolor="black")
plt.xlabel("value")
plt.ylabel("Frequency")
plt.title("distribution of the column")
plt.grid()
plt.show()

import pandas as pd
from sklearn.preprocessing import LabelEncoder
data = pd.DataFrame({
    'name':["anu","bhanu","chetu","daadu"],
    "city":["goa","tripura","AP",None],
})
print(data)
data=data.fillna("Mp")
print(data)

import pandas as pd
from sklearn.preprocessing import LabelEncoder
data = pd.DataFrame({
    'name':["anu","bhanu","chetu","daadu"],
    "city":["goa","tripura","AP",None],
    "age":[20,19,None,22]
})
#OG data
print(data)

#filiing missed value
data["age"] = data["age"].fillna(data["age"].mean())
data["city"]= data["city"].fillna("Nagpur")
print(data)
#city into numbers
le=LabelEncoder()
data["city"] = le.fit_transform(data["city"])


#final clranined data
print("/n cleaned and preprocessed data")
print(data)
print(data["age"])

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset=pd.read_csv("/content/Data.csv")
print(dataset)
X= dataset.iloc[:, :-1].values
Y= dataset.iloc[:, -1].values

print("OG X")
print(X)
print("OG Y")
print(Y)