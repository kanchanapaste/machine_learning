# -*- coding: utf-8 -*-
"""day7 project1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nQhlAZ5q2ZfLoM-RF4pZ3_rLRLE9j5zd
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report
import warnings
warnings.filterwarnings('ignore')

url="https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv"
titanic_data=pd.read_csv(url)

titanic_data=titanic_data.dropna(subset=['Survived'])

x=titanic_data[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']]
y=titanic_data['Survived']

x.loc[:, 'Sex']=x['Sex'].map({"female": 0, 'male':1})

x.loc[:, 'Age'].fillna(x['Age'].median(), inplace=True)

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.2,random_state=42)
rf_classifier=RandomForestClassifier(n_estimators=100,random_state=42)
rf_classifier.fit(x_train,y_train)
y_pred=rf_classifier.predict(x_test)

accuracy = accuracy_score(y_test, y_pred)
classification_rep = classification_report(y_test, y_pred)

print(f"Accuracy: {accuracy:.2f}")
print("\nClassification Report:\n", classification_rep)

sample=x_test.iloc[0:1]
prediction=rf_classifier.predict(sample)

sample_dict=sample.iloc[0].to_dict()
print(f"\nSample Passenger: {sample_dict}")
print(f"Predicted Survival: {'Survived' if prediction[0] == 1 else'Did Not Survive'}")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, ConfusionMatrixDisplay

"""Load titanic dataset"""

dataset = pd.read_csv("/content/titanic.csv")
print(dataset.head())

dataset.columns

dataset.describe()

dataset.shape

dataset.info

"""Data prepocessing"""

dataset.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)

dataset.dropna(subset=['Survived'], inplace=True)

dataset['Age'].fillna(dataset['Age'].median(), inplace=True)
dataset['Embarked'].fillna(dataset['Embarked'].mode()[0], inplace=True)

label_encoder = LabelEncoder()
dataset['Sex'] = label_encoder.fit_transform(dataset['Sex'])
dataset['Embarked'] = label_encoder.fit_transform(dataset['Embarked'])
print(dataset['Sex'].head())
print(dataset['Embarked'].head())

x=dataset.drop('Survived',axis=1)
print(x)
y=dataset['Survived']
print(y)

scaler=StandardScaler()
x_scaled = scaler.fit_transform(x)
print(x_scaled)

x_train, x_test, y_train, y_test = train_test_split(x_scaled, y, test_size=0.2, random_state=42)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(x_train, y_train)

y_pred = model.predict(x_test)
print(y_pred)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

cm = confusion_matrix(y_test, y_pred)
print("\n Confusion Matrix:\n", cm)

disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Did Not Survive', 'Survived'])
disp.plot(cmap='Blues')
plt.title("Confusion Matrix")
plt.show()

print("\n Classification Report:\n")
print(classification_report(y_test, y_pred))

sns.countplot(data=dataset, x='Sex', hue='Survived')
plt.title('Gender vs Survival')
plt.show()

sns.countplot(data=dataset, x='Pclass', hue='Survived')
plt.title('Passenger Class vs Survival')
plt.show()

sns.histplot(data=dataset, x='Age', bins=30, hue='Survived', kde=True)
plt.title('Age Distribution by Survival')
plt.show()

plt.figure(figsize=(10,6))
sns.heatmap(dataset.corr(), annot=True, cmap='coolwarm')
plt.title('Feature Correlation Heatmap')
plt.show()