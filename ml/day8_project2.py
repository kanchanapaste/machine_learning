# -*- coding: utf-8 -*-
"""day8 project2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dELtpLgNhR4FtLrsHiY-KF1lxdB9mcQy
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
dataset=pd.read_csv('/content/train.csv')
print(dataset)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix,classification_report,ConfusionMatrixDisplay
from sklearn.preprocessing import StandardScaler

sns.set(style='whitegrid')

dataset=pd.read_csv('/content/train.csv')

print("First 5 rows of dataset",dataset.head())
print("/nDataset Info : /n")
print(  dataset.info())
print("/n Missing values in dataset: /n",dataset.isnull().sum())

# 04 create new features( with pixel )

dataset['pixel_area']=dataset['px_height']*dataset['px_width']


# 05 x and y
x=dataset.drop('price_range',axis=1)
y=dataset['price_range']


#06 feature scaling using random forest(no need of scaling)

scale=StandardScaler()
x=scale.fit_transform(x)

# 07splitting data using train and test

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=42)

#08 train model using random forest classifier

rf_model=RandomForestClassifier(n_estimators=100,random_state=42)
rf_model.fit(x_train,y_train)

#09  prediction
y_pred=rf_model.predict(x_test)

# 10 evolution
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

print("\nClassification Report:\n", classification_report(y_test, y_pred))

#1 heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(dataset.corr(), annot=True, cmap='coolwarm')
plt.title('Correlation Heatmap')
plt.show()

#2
cm = confusion_matrix(y_test, y_pred)
print("\n Confusion Matrix:\n", cm)

disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0,1,2,3])
disp.plot(cmap='Grays')
plt.title("Confusion Matrix")
plt.show()

#3
sns.countplot(data=dataset, x='n_cores', hue='price_range')
plt.title('n_cores vs price_range')
plt.show()

#4
sns.boxplot(data=dataset, x='price_range', y='ram')
plt.title('Price Range vs RAM')
plt.show()

#5
sns.histplot(data=dataset, x='int_memory', bins=30, hue='price_range', kde=True)
plt.title('int_memory and price_range')
plt.show()

#6
sns.histplot(data=dataset, x='int_memory',y="price_range", bins=30, hue='price_range', kde=True)
plt.title('int_memory and price_range')
plt.show()

#7
sns.pairplot(data=dataset, hue='price_range')
plt.title('Pairwise relationships of features by price_range')
plt.show()

#8
sns.boxenplot(x="ram",y="price_range",data=dataset)
plt.title("box Plot")
plt.show()

#9
plt.plot(dataset["ram"])

plt.show()

#10
sns.violinplot(x="price_range",y="ram",color="green",data=dataset)
plt.title("violin Plot")
plt.show()

#11
plt.hist(dataset["ram"],bins=6,color="pink",edgecolor="red")

plt.show()

#12
price = dataset['n_cores'].value_counts()
plt.pie(price, labels=price.index,autopct="%1.6f")
plt.title('Distribution of Price Range')
plt.show()

#13
plt.bar(dataset["n_cores"],dataset["ram"],color="skyblue",width=0.4)
plt.show()

#14
sns.stripplot(x="price_range",y="ram",color="red",data=dataset)
plt.show()

#15
sns.barplot(x="price_range",y="ram",color="yellow",data=dataset)
plt.show()

#16
plt.scatter(x="price_range",y="ram",data=dataset)
plt.show()

#17
sns.jointplot(x="ram",y="n_cores",data=dataset)
plt.show()

sns.kdeplot(data=dataset,x="mobile_wt",y="dual_sim")
plt.show()

sns.stripplot(x="price_range",y="clock_speed",data=dataset)
plt.show()

#18
sns.countplot(x="touch_screen",hue='price_range', data=dataset)
plt.show()

#19
sns.stripplot(x="wifi",y="mobile_wt",data=dataset)
plt.show()

#20
sns.violinplot(x="dual_sim",y="mobile_wt",data=dataset)
plt.title("violin Plot")
plt.show()

#21
sns.histplot(data=dataset, x='px_height', bins=30, hue='price_range',color="yellow", kde=True)
plt.title('int_memory and price_range')
plt.show()

#22
sns.pointplot(x="price_range",y="px_height",data=dataset)
plt.show()

#23
sns.countplot(x="blue",hue='price_range',color="green", data=dataset)
plt.show()

#24
sns.scatterplot(x="px_height",y="px_width",hue="price_range",data=dataset)
plt.show()

sns.boxplot(x="price_range",y="px_height",data=dataset)
plt.show()